import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Shield, 
  AlertTriangle, 
  Users, 
  Activity, 
  Eye, 
  Ban,
  CheckCircle,
  XCircle,
  Clock,
  TrendingUp
} from "lucide-react";

interface AltDetectionReport {
  id: string;
  suspectedAltUserId: string;
  mainAccountUserId: string | null;
  detectionMethod: string;
  confidenceScore: number;
  severity: string;
  status: string;
  autoGenerated: boolean;
  createdAt: string;
  evidence: any;
  similarityMetrics: any;
}

interface SecurityEvent {
  id: string;
  eventType: string;
  severity: string;
  userId: string | null;
  ipAddress: string;
  details: any;
  resolved: boolean;
  createdAt: string;
}

interface UserSession {
  id: string;
  userId: string;
  ipAddress: string;
  userAgent: string;
  deviceFingerprint: string | null;
  riskScore: number;
  suspiciousActivity: boolean;
  createdAt: string;
  lastActivity: string;
}

export default function SecurityDashboard() {
  const [selectedTab, setSelectedTab] = useState("overview");

  // Fetch alt detection reports
  const { data: altReports = [], isLoading: altReportsLoading } = useQuery<AltDetectionReport[]>({
    queryKey: ["/api/alt-detection"],
  });

  // Fetch security events
  const { data: securityEvents = [], isLoading: securityEventsLoading } = useQuery<SecurityEvent[]>({
    queryKey: ["/api/security-events"],
  });

  // Fetch recent sessions
  const { data: recentSessions = [], isLoading: sessionsLoading } = useQuery<UserSession[]>({
    queryKey: ["/api/user-sessions"],
  });

  // Calculate security metrics
  const securityMetrics = {
    totalAltReports: altReports.length,
    highConfidenceAlts: altReports.filter(r => r.confidenceScore >= 75).length,
    pendingReports: altReports.filter(r => r.status === 'pending').length,
    confirmedAlts: altReports.filter(r => r.status === 'confirmed').length,
    totalSecurityEvents: securityEvents.length,
    unresolvedEvents: securityEvents.filter(e => !e.resolved).length,
    highRiskSessions: recentSessions.filter(s => s.riskScore >= 70).length,
    suspiciousActivities: recentSessions.filter(s => s.suspiciousActivity).length,
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status.toLowerCase()) {
      case 'confirmed': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'false_positive': return <XCircle className="h-4 w-4 text-red-500" />;
      case 'pending': return <Clock className="h-4 w-4 text-yellow-500" />;
      default: return <AlertTriangle className="h-4 w-4 text-gray-500" />;
    }
  };

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Security Dashboard</h1>
          <p className="text-muted-foreground">
            Monitor alt accounts, security events, and user behavior
          </p>
        </div>
        <Badge variant="outline" className="px-3 py-1">
          <Activity className="h-4 w-4 mr-1" />
          Beta Testing Mode
        </Badge>
      </div>

      {/* Security Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Alt Reports</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{securityMetrics.totalAltReports}</div>
            <p className="text-xs text-muted-foreground">
              {securityMetrics.highConfidenceAlts} high confidence
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Security Events</CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{securityMetrics.totalSecurityEvents}</div>
            <p className="text-xs text-muted-foreground">
              {securityMetrics.unresolvedEvents} unresolved
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">High Risk Sessions</CardTitle>
            <Shield className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{securityMetrics.highRiskSessions}</div>
            <p className="text-xs text-muted-foreground">
              Risk score ≥ 70
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between pb-2">
            <CardTitle className="text-sm font-medium">Suspicious Activity</CardTitle>
            <Eye className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{securityMetrics.suspiciousActivities}</div>
            <p className="text-xs text-muted-foreground">
              Flagged sessions
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Security Analysis Tabs */}
      <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList>
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="alt-detection">Alt Detection</TabsTrigger>
          <TabsTrigger value="security-events">Security Events</TabsTrigger>
          <TabsTrigger value="sessions">User Sessions</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Recent Alt Detection Reports */}
            <Card>
              <CardHeader>
                <CardTitle>Recent Alt Detection Reports</CardTitle>
                <CardDescription>Latest potential duplicate account detections</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {altReports.slice(0, 5).map((report) => (
                  <div key={report.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      {getStatusIcon(report.status)}
                      <div>
                        <p className="font-medium">User ID: {report.suspectedAltUserId}</p>
                        <p className="text-sm text-muted-foreground">
                          {report.detectionMethod} • {report.confidenceScore}% confidence
                        </p>
                      </div>
                    </div>
                    <Badge 
                      variant="outline" 
                      className={`${getSeverityColor(report.severity)} text-white`}
                    >
                      {report.severity}
                    </Badge>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Security Events Summary */}
            <Card>
              <CardHeader>
                <CardTitle>Security Events</CardTitle>
                <CardDescription>Recent security-related activities</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {securityEvents.slice(0, 5).map((event) => (
                  <div key={event.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center space-x-3">
                      <AlertTriangle className={`h-4 w-4 ${
                        event.severity === 'critical' ? 'text-red-500' : 
                        event.severity === 'high' ? 'text-orange-500' : 
                        event.severity === 'medium' ? 'text-yellow-500' : 'text-green-500'
                      }`} />
                      <div>
                        <p className="font-medium">{event.eventType.replace('_', ' ')}</p>
                        <p className="text-sm text-muted-foreground">
                          IP: {event.ipAddress} • {new Date(event.createdAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                    {event.resolved ? (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    ) : (
                      <Clock className="h-4 w-4 text-yellow-500" />
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="alt-detection" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Alt Detection Reports</CardTitle>
              <CardDescription>Comprehensive analysis of potential duplicate accounts</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {altReports.map((report) => (
                  <div key={report.id} className="p-4 border rounded-lg space-y-3">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        {getStatusIcon(report.status)}
                        <div>
                          <h4 className="font-semibold">
                            Suspected Alt: {report.suspectedAltUserId}
                          </h4>
                          {report.mainAccountUserId && (
                            <p className="text-sm text-muted-foreground">
                              Main Account: {report.mainAccountUserId}
                            </p>
                          )}
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge 
                          variant="outline" 
                          className={`${getSeverityColor(report.severity)} text-white`}
                        >
                          {report.severity}
                        </Badge>
                        <Badge variant="secondary">
                          {report.confidenceScore}% confidence
                        </Badge>
                        {report.autoGenerated && (
                          <Badge variant="outline">Auto-generated</Badge>
                        )}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                      <div>
                        <p className="font-medium">Detection Method</p>
                        <p className="text-muted-foreground">{report.detectionMethod}</p>
                      </div>
                      <div>
                        <p className="font-medium">Status</p>
                        <p className="text-muted-foreground">{report.status}</p>
                      </div>
                      <div>
                        <p className="font-medium">Created</p>
                        <p className="text-muted-foreground">
                          {new Date(report.createdAt).toLocaleDateString()}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">Similarity</p>
                        <p className="text-muted-foreground">
                          {report.similarityMetrics?.ipSimilarity || 0}% IP
                        </p>
                      </div>
                    </div>

                    <div className="flex space-x-2">
                      <Button size="sm" variant="outline">
                        <Eye className="h-4 w-4 mr-2" />
                        Review
                      </Button>
                      <Button size="sm" variant="outline">
                        <CheckCircle className="h-4 w-4 mr-2" />
                        Confirm
                      </Button>
                      <Button size="sm" variant="outline">
                        <XCircle className="h-4 w-4 mr-2" />
                        False Positive
                      </Button>
                      <Button size="sm" variant="destructive">
                        <Ban className="h-4 w-4 mr-2" />
                        Take Action
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security-events" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Security Events Log</CardTitle>
              <CardDescription>Detailed security event monitoring</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {securityEvents.map((event) => (
                  <div key={event.id} className="p-4 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center space-x-2">
                        <AlertTriangle className={`h-4 w-4 ${
                          event.severity === 'critical' ? 'text-red-500' : 
                          event.severity === 'high' ? 'text-orange-500' : 
                          event.severity === 'medium' ? 'text-yellow-500' : 'text-green-500'
                        }`} />
                        <h4 className="font-semibold">{event.eventType.replace('_', ' ')}</h4>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge variant={event.resolved ? 'default' : 'destructive'}>
                          {event.resolved ? 'Resolved' : 'Active'}
                        </Badge>
                        <Badge variant="outline">{event.severity}</Badge>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm mb-3">
                      <div>
                        <p className="font-medium">IP Address</p>
                        <p className="text-muted-foreground">{event.ipAddress}</p>
                      </div>
                      <div>
                        <p className="font-medium">User ID</p>
                        <p className="text-muted-foreground">{event.userId || 'Unknown'}</p>
                      </div>
                      <div>
                        <p className="font-medium">Timestamp</p>
                        <p className="text-muted-foreground">
                          {new Date(event.createdAt).toLocaleString()}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">Status</p>
                        <p className="text-muted-foreground">
                          {event.resolved ? 'Resolved' : 'Under Investigation'}
                        </p>
                      </div>
                    </div>

                    {event.details && (
                      <div className="bg-muted/50 p-3 rounded text-sm">
                        <p className="font-medium mb-1">Event Details:</p>
                        <pre className="whitespace-pre-wrap text-xs">
                          {JSON.stringify(event.details, null, 2)}
                        </pre>
                      </div>
                    )}

                    <div className="flex space-x-2 mt-3">
                      <Button size="sm" variant="outline">
                        <Eye className="h-4 w-4 mr-2" />
                        Investigate
                      </Button>
                      {!event.resolved && (
                        <Button size="sm" variant="default">
                          <CheckCircle className="h-4 w-4 mr-2" />
                          Mark Resolved
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="sessions" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>User Sessions</CardTitle>
              <CardDescription>Monitor user sessions and risk assessments</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {recentSessions.map((session) => (
                  <div key={session.id} className="p-4 border rounded-lg">
                    <div className="flex items-center justify-between mb-2">
                      <div>
                        <h4 className="font-semibold">User: {session.userId}</h4>
                        <p className="text-sm text-muted-foreground">
                          IP: {session.ipAddress}
                        </p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Badge 
                          variant={session.riskScore >= 70 ? 'destructive' : 
                                 session.riskScore >= 40 ? 'default' : 'secondary'}
                        >
                          Risk: {session.riskScore}
                        </Badge>
                        {session.suspiciousActivity && (
                          <Badge variant="destructive">Suspicious</Badge>
                        )}
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-sm">
                      <div>
                        <p className="font-medium">Device Fingerprint</p>
                        <p className="text-muted-foreground text-xs">
                          {session.deviceFingerprint ? 
                            session.deviceFingerprint.substring(0, 16) + '...' : 'None'}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">User Agent</p>
                        <p className="text-muted-foreground text-xs">
                          {session.userAgent.substring(0, 30)}...
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">Created</p>
                        <p className="text-muted-foreground">
                          {new Date(session.createdAt).toLocaleString()}
                        </p>
                      </div>
                      <div>
                        <p className="font-medium">Last Activity</p>
                        <p className="text-muted-foreground">
                          {new Date(session.lastActivity).toLocaleString()}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {securityMetrics.unresolvedEvents > 0 && (
        <Alert>
          <AlertTriangle className="h-4 w-4" />
          <AlertDescription>
            You have {securityMetrics.unresolvedEvents} unresolved security events that require attention.
          </AlertDescription>
        </Alert>
      )}
    </div>
  );
}